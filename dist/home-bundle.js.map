{"version":3,"sources":["main.js"],"names":["mapLoaded","mapOpen","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","loadImg","target","rootMargin","threshold","document","addEventListener","event","updateRestaurants","fetchNeighborhoods","fetchCuisines","querySelector","openClass","mapEl","buttonEl","getScript","addMarkersToMap","classList","remove","innerText","add","imgEl","src","dataSet","srcset","onload","DBHelper","error","neighborhoods","console","fillNeighborhoodsHTML","arguments","length","undefined","self","select","getElementById","neighborhood","createElement","option","innerHTML","cuisines","fillCuisinesHTML","cuisine","value","window","initMap","map","google","maps","Map","center","lat","lng","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","restaurants","querySelectorAll","el","observe","markers","ul","restaurant","append","createRestaurantHTML","fillRestaurantsHTML","li","className","image","thumbnail","imageUrlForRestaurant","thumbnail2x","name","body","more","address","marker","mapMarkerForRestaurant","addListener","location","href","url","push"],"mappings":"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","file":"home-bundle.js","sourcesContent":["const MAP_URI = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCmUsxSG50Sw0vo6Z2wubsyIefmz2LgQEw&libraries=places&callback=initMap';\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines,\r\n  mapLoaded = false,\r\n  mapOpen = false;\r\n  const observer = new IntersectionObserver(entries => {\r\n    entries.forEach(entry => { \r\n      if (entry.isIntersecting) {\r\n        loadImg(entry.target);\r\n      } \r\n    });\r\n  }, {\r\n    rootMargin: '0px 0px',\r\n    threshold: 0.25\r\n  });  \r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  updateRestaurants();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n// Lazy load map \r\ndocument.querySelector('#open-map-btn').addEventListener('click', event => {\r\n  const openClass = 'map--open';\r\n  const openText = 'Show map';\r\n  const closeText = 'Hide map';\r\n  const mapEl = document.querySelector('#map');\r\n  const buttonEl = event.target;\r\n\r\n  if (!mapLoaded) {\r\n    getScript(MAP_URI, () => {\r\n      mapLoaded = true;\r\n      addMarkersToMap();\r\n    });\r\n  }\r\n  if (mapOpen) {\r\n    mapEl.classList.remove(openClass);\r\n    buttonEl.innerText = openText;\r\n    mapOpen = false;\r\n  } else {\r\n    mapEl.classList.add(openClass);\r\n    buttonEl.innerText = closeText;\r\n    mapOpen = true;\r\n  }\r\n});\r\n\r\nloadImg = imgEl => {\r\n  imgEl.src = imgEl.dataSet.src;\r\n  imgEl.srcset = imgEl.dataSet.srcset;\r\n  imgEl.onload = () => imgEl.classList.add('restaurant-card__img--loaded');\r\n};\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n        document.querySelectorAll('.restaurant-card__img').forEach(el => observer.observe(el));\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  self.markers = self.markers || [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  if (mapLoaded) {\r\n    addMarkersToMap();\r\n  } \r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-card';\r\n\r\n  const image = document.createElement('img');\r\n  const thumbnail = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\r\n  const thumbnail2x = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\r\n  image.className = 'restaurant-card__img';\r\n  image.dataSet = { src: thumbnail, srcset: `${thumbnail}, ${thumbnail2x} 2x` };\r\n  image.alt = `Image of ${restaurant.name} restaurant`;\r\n  li.append(image);\r\n\r\n  const body = document.createElement('div');\r\n  body.className = 'restaurant-card__body';\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  body.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  body.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  body.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  body.append(more);\r\n\r\n  li.append(body);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}