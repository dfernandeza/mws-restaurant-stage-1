{"version":3,"sources":["main.js"],"names":["mapLoaded","mapOpen","document","addEventListener","event","updateRestaurants","fetchNeighborhoods","fetchCuisines","querySelector","openClass","mapEl","buttonEl","target","getScript","addMarkersToMap","classList","remove","innerText","add","DBHelper","error","neighborhoods","console","self","fillNeighborhoodsHTML","arguments","length","undefined","getElementById","forEach","neighborhood","select","option","innerHTML","cuisines","fillCuisinesHTML","cuisine","createElement","value","window","initMap","loc","google","maps","Map","lat","lng","scrollwheel","cSelect","nSelect","selectedIndex","cIndex","fetchRestaurantByCuisineAndNeighborhood","restaurants","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","ul","restaurant","createRestaurantHTML","li","className","imageUrlForRestaurant","image","thumbnail","thumbnail2x","srcset","name","body","append","address","urlForRestaurant","more","marker","mapMarkerForRestaurant","map","addListener","href","url"],"mappings":"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","file":"home-bundle.js","sourcesContent":["const MAP_URI = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCmUsxSG50Sw0vo6Z2wubsyIefmz2LgQEw&libraries=places&callback=initMap';\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines,\r\n  mapLoaded = false,\r\n  mapOpen = false;\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  updateRestaurants();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n// Lazy load map \r\ndocument.querySelector('#open-map-btn').addEventListener('click', event => {\r\n  const openClass = 'map--open';\r\n  const openText = 'Show map';\r\n  const closeText = 'Hide map';\r\n  const mapEl = document.querySelector('#map');\r\n  const buttonEl = event.target;\r\n\r\n  if (!mapLoaded) {\r\n    getScript(MAP_URI, () => {\r\n      mapLoaded = true;\r\n      addMarkersToMap();\r\n    });\r\n  }\r\n  if (mapOpen) {\r\n    mapEl.classList.remove(openClass);\r\n    buttonEl.innerText = openText;\r\n    mapOpen = false;\r\n  } else {\r\n    mapEl.classList.add(openClass);\r\n    buttonEl.innerText = closeText;\r\n    mapOpen = true;\r\n  }\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  self.markers = self.markers || [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  if (mapLoaded) {\r\n    addMarkersToMap();\r\n  } \r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-card';\r\n\r\n  const image = document.createElement('img');\r\n  const thumbnail = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\r\n  const thumbnail2x = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\r\n  image.className = 'restaurant-card__img';\r\n  image.src = thumbnail;\r\n  image.srcset = `${thumbnail}, ${thumbnail2x} 2x`;\r\n  image.alt = `Image of ${restaurant.name} restaurant`;\r\n  li.append(image);\r\n\r\n  const body = document.createElement('div');\r\n  body.className = 'restaurant-card__body';\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  body.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  body.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  body.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  body.append(more);\r\n\r\n  li.append(body);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}