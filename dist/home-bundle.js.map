{"version":3,"sources":["main.js"],"names":["document","addEventListener","event","fetchNeighborhoods","DBHelper","error","neighborhoods","console","fillNeighborhoodsHTML","arguments","length","undefined","self","select","getElementById","neighborhood","createElement","option","innerHTML","forEach","fetchCuisines","cuisines","fillCuisinesHTML","cuisine","value","window","initMap","map","google","maps","Map","center","lat","lng","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","restaurants","markers","m","setMap","fillRestaurantsHTML","ul","restaurant","append","createRestaurantHTML","addMarkersToMap","li","className","image","thumbnail","imageUrlForRestaurant","srcset","thumbnail2x","name","alt","body","address","more","marker","mapMarkerForRestaurant","addListener","location","href","url","push"],"mappings":"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","file":"home-bundle.js","sourcesContent":["let restaurants, neighborhoods, cuisines;\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  self.markers = self.markers || [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-card';\r\n\r\n  const image = document.createElement('img');\r\n  const thumbnail = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\r\n  const thumbnail2x = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\r\n  image.className = 'restaurant-card__img';\r\n  image.src = thumbnail;\r\n  image.srcset = `${thumbnail}, ${thumbnail2x} 2x`;\r\n  image.alt = `Image of ${restaurant.name} restaurant`;\r\n  li.append(image);\r\n\r\n  const body = document.createElement('div');\r\n  body.className = 'restaurant-card__body';\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  body.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  body.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  body.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  body.append(more);\r\n\r\n  li.append(body);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}