{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","latlng","center","fillBreadcrumb","callback","id","getParameterByName","fetchRestaurantById","DBHelper","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","small","imageUrlForRestaurant","image","className","medium","src","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","caption","createElement","key","innerText","day","appendChild","time","row","reviews","container","title","noReviews","ul","createReviewHTML","review","li","date","rating","comments","setAttribute","breadcrumb","url","replace","RegExp","results","decodeURIComponent"],"mappings":"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","file":"restaurant-bundle.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  const small = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\n  const medium = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\n  const large = DBHelper.imageUrlForRestaurant(restaurant);\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = `${small} 320w, ${medium} 640w, ${large} 800w`;\n  image.alt = `Image of ${restaurant.name} restaurant`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  const caption = document.createElement('caption');\n\n  caption.innerText = 'Restaurant Operating Hours';\n  hours.appendChild(caption);\n\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.className = 'review__rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  li.setAttribute('aria-current', 'page');\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}