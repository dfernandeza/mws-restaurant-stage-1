{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","latlng","center","fillBreadcrumb","DBHelper","reviews","mapMarkerForRestaurant","addEventListener","event","preventDefault","id","target","checked","name","value","rating","addReview","restaurant_id","comments","review","appendChild","ul","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","address","small","imageUrlForRestaurant","image","className","medium","src","operating_hours","fillRestaurantHoursHTML","favoriteCheckbox","setAttribute","operatingHours","hours","caption","createElement","key","innerText","day","time","row","container","querySelectorAll","title","classList","add","fillReviewsHTML","noReviews","createReviewHTML","li","date","Date","createdAt","toLocaleString","breadcrumb","url","location","href","replace","RegExp","results","decodeURIComponent"],"mappings":"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","file":"restaurant-bundle.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.fetchReviewsByRestaurant(self.restaurant.id, (error, reviews) => {\n        if (!reviews) {\n          return;\n        }\n        // fill reviews\n        self.restaurant.reviews = reviews;\n        fillReviewsHTML(self.restaurant.reviews);\n      });\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Listen for the 'mark as favorite' event\n */\ndocument.getElementById('favorite').addEventListener('change', event => {\n  event.preventDefault();\n  if (self.restaurant) {\n    DBHelper.markAsFavorite(self.restaurant.id, event.target.checked);\n  }\n});\n\n/**\n * Listen for the 'add review' event\n */\ndocument.getElementById('add-review-form').addEventListener('submit', event => {\n  event.preventDefault();\n\n  const name = event.target.name.value;\n  const rating = event.target.rating.value;\n  const comments = event.target.comments.value;\n  \n  DBHelper.addReview({\n    restaurant_id: self.restaurant.id,\n    name,\n    rating,\n    comments\n  }, (error, review) => {\n    const ul = document.getElementById('reviews-list');\n    ul.appendChild(createReviewHTML(review));\n    event.target.reset();\n  });\n});\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      // if the restaurant was already fetched (from indexedDB cache) don't overwrite it\n      self.restaurant = self.restaurant || restaurant;\n      if (error) {\n        console.error(error);\n        return;\n      }\n      if (self.restaurant) {\n        fillRestaurantHTML();\n        callback(null, self.restaurant);\n      }\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  const small = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\n  const medium = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\n  const large = DBHelper.imageUrlForRestaurant(restaurant);\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = `${small} 320w, ${medium} 640w, ${large} 800w`;\n  image.alt = `Image of ${restaurant.name} restaurant`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  // set is_favorite flag\n  const favoriteCheckbox = document.getElementById('favorite');\n  if (restaurant.is_favorite) {\n    favoriteCheckbox.setAttribute('checked', '');\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  const caption = document.createElement('caption');\n\n  caption.innerText = 'Restaurant Operating Hours';\n  hours.appendChild(caption);\n\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  \n  if (container.querySelectorAll('.reviews-title').length === 0) { \n    const title =  document.createElement('h3');\n    title.classList.add('reviews-title');\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n  }\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n\n  const ul = document.getElementById('reviews-list');\n  ul.innerHTML = '';\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt).toLocaleString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.className = 'review__rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n\n  li.innerHTML = restaurant.name;\n  li.setAttribute('aria-current', 'page');\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}