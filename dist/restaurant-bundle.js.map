{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","latlng","center","fillBreadcrumb","reviews","length","fillReviewsHTML","DBHelper","mapMarkerForRestaurant","addEventListener","event","preventDefault","id","target","checked","name","value","rating","addReview","restaurant_id","comments","review","appendChild","ul","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","undefined","innerHTML","address","small","imageUrlForRestaurant","image","className","medium","src","operating_hours","fillRestaurantHoursHTML","favoriteCheckbox","setAttribute","operatingHours","hours","caption","createElement","key","innerText","day","time","row","container","title","noReviews","createReviewHTML","li","date","Date","createdAt","toLocaleString","breadcrumb","url","location","href","replace","RegExp","results","decodeURIComponent"],"mappings":"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","file":"restaurant-bundle.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.fetchReviewsByRestaurant(self.restaurant.id, (error, reviews) => {\n        // fill reviews\n        if (reviews && reviews.length) {\n          fillReviewsHTML(reviews);\n        }\n      });\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Listen for the 'mark as favorite' event\n */\ndocument.getElementById('favorite').addEventListener('change', event => {\n  event.preventDefault();\n  if (self.restaurant) {\n    DBHelper.markAsFavorite(self.restaurant.id, event.target.checked);\n  }\n});\n\n/**\n * Listen for the 'add review' event\n */\ndocument.getElementById('add-review-form').addEventListener('submit', event => {\n  event.preventDefault();\n\n  const name = event.target.name.value;\n  const rating = event.target.rating.value;\n  const comments = event.target.comments.value;\n  \n  DBHelper.addReview({\n    restaurant_id: self.restaurant.id,\n    name,\n    rating,\n    comments\n  }, (error, review) => {\n    const ul = document.getElementById('reviews-list');\n    ul.appendChild(createReviewHTML(review));\n    event.target.reset();\n  });\n});\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  const small = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\n  const medium = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\n  const large = DBHelper.imageUrlForRestaurant(restaurant);\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = `${small} 320w, ${medium} 640w, ${large} 800w`;\n  image.alt = `Image of ${restaurant.name} restaurant`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  // set is_favorite flag\n  const favoriteCheckbox = document.getElementById('favorite');\n  if (restaurant.is_favorite) {\n    favoriteCheckbox.setAttribute('checked', '');\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  const caption = document.createElement('caption');\n\n  caption.innerText = 'Restaurant Operating Hours';\n  hours.appendChild(caption);\n\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt).toLocaleString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.className = 'review__rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n\n  li.innerHTML = restaurant.name;\n  li.setAttribute('aria-current', 'page');\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}