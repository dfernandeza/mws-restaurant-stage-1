{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","latlng","center","fillBreadcrumb","addEventListener","event","preventDefault","DBHelper","id","target","checked","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","small","imageUrlForRestaurant","image","className","medium","src","operating_hours","fillRestaurantHoursHTML","favoriteCheckbox","setAttribute","fillReviewsHTML","operatingHours","hours","caption","createElement","key","innerText","day","appendChild","time","row","reviews","container","title","noReviews","ul","createReviewHTML","review","li","date","rating","comments","breadcrumb","url","location","href","replace","RegExp","results","decodeURIComponent"],"mappings":"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","file":"restaurant-bundle.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Listen for the 'mark as favorite' event\n */\ndocument.getElementById('favorite').addEventListener('change', event => {\n  event.preventDefault();\n  if (self.restaurant) {\n    DBHelper.markAsFavorite(self.restaurant.id, event.target.checked);\n  }\n});\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  const small = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\n  const medium = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\n  const large = DBHelper.imageUrlForRestaurant(restaurant);\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = `${small} 320w, ${medium} 640w, ${large} 800w`;\n  image.alt = `Image of ${restaurant.name} restaurant`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  // set is_favorite flag\n  const favoriteCheckbox = document.getElementById('favorite');\n  if (restaurant.is_favorite) {\n    favoriteCheckbox.setAttribute('checked', '');\n  }\n\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  const caption = document.createElement('caption');\n\n  caption.innerText = 'Restaurant Operating Hours';\n  hours.appendChild(caption);\n\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.className = 'review__rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n\n  li.innerHTML = restaurant.name;\n  li.setAttribute('aria-current', 'page');\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}