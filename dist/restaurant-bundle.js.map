{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","latlng","center","fillBreadcrumb","DBHelper","reviews","mapMarkerForRestaurant","addEventListener","event","preventDefault","id","target","checked","name","value","rating","addReview","restaurant_id","comments","review","appendChild","createReviewHTML","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","address","image","large","imageUrlForRestaurant","srcset","small","medium","favoriteCheckbox","is_favorite","operating_hours","setAttribute","hours","caption","createElement","fillRestaurantHoursHTML","innerText","operatingHours","day","row","time","key","container","querySelectorAll","title","classList","add","noReviews","forEach","ul","li","date","Date","createdAt","toLocaleString","breadcrumb","url","RegExp","results","decodeURIComponent","replace"],"mappings":"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","file":"restaurant-bundle.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.fetchReviewsByRestaurant(self.restaurant.id, (error, reviews) => {\n        if (!reviews) {\n          return;\n        }\n        // fill reviews\n        self.restaurant.reviews = reviews;\n        fillReviewsHTML(self.restaurant.reviews);\n      });\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Listen for the 'mark as favorite' event\n */\ndocument.getElementById('favorite').addEventListener('change', event => {\n  event.preventDefault();\n  if (self.restaurant) {\n    DBHelper.markAsFavorite(self.restaurant.id, event.target.checked);\n  }\n});\n\n/**\n * Listen for the 'add review' event\n */\ndocument.getElementById('add-review-form').addEventListener('submit', event => {\n  event.preventDefault();\n\n  const name = event.target.name.value;\n  const rating = event.target.rating.value;\n  const comments = event.target.comments.value;\n  \n  DBHelper.addReview({\n    restaurant_id: self.restaurant.id,\n    name,\n    rating,\n    comments\n  }, (error, review) => {\n    event.target.reset();\n    \n    if (error || !review) { return; }\n    const ul = document.getElementById('reviews-list');\n    ul.appendChild(createReviewHTML(review));\n  });\n});\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      // if the restaurant was already fetched (from indexedDB cache) don't overwrite it\n      self.restaurant = self.restaurant || restaurant;\n      if (error) {\n        console.error(error);\n        return;\n      }\n      if (self.restaurant) {\n        fillRestaurantHTML();\n        callback(null, self.restaurant);\n      }\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  const small = DBHelper.imageUrlForRestaurant(restaurant, 'sm');\n  const medium = DBHelper.imageUrlForRestaurant(restaurant, 'sm2x');\n  const large = DBHelper.imageUrlForRestaurant(restaurant);\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = `${small} 320w, ${medium} 640w, ${large} 800w`;\n  image.alt = `Image of ${restaurant.name} restaurant`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  // set is_favorite flag\n  const favoriteCheckbox = document.getElementById('favorite');\n  if (restaurant.is_favorite) {\n    favoriteCheckbox.setAttribute('checked', '');\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  const caption = document.createElement('caption');\n\n  caption.innerText = 'Restaurant Operating Hours';\n  hours.appendChild(caption);\n\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  \n  if (container.querySelectorAll('.reviews-title').length === 0) { \n    const title =  document.createElement('h3');\n    title.classList.add('reviews-title');\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n  }\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n\n  const ul = document.getElementById('reviews-list');\n  ul.innerHTML = '';\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt).toLocaleString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.className = 'review__rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n\n  li.innerHTML = restaurant.name;\n  li.setAttribute('aria-current', 'page');\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}