{"version":3,"sources":["offline.js","utils.js","dbhelper.js"],"names":["isOnline","connectionStatus","document","getElementById","navigator","onLine","classList","add","remove","window","getScript","source","callback","el","createElement","onload","src","body","appendChild","addEventListener","serviceWorker","register","then","reg","controller","waiting","console","log","installing","ready","swRegistration","sync","catch","DATABASE_VERSION","dbPromise","idb","open","upgradeDb","oldVersion","store","createObjectStore","keyPath","createIndex","DBHelperClass","db","transaction","objectStore","index","getAll","restaurants","error","fetch","DBHelper","DATABASE_URL","data","json","dateIndex","forEach","restaurant","put","openCursor","cursor","advance","removeOld","delete","continue","id","get","parseInt","cachedRestaurant","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","rid","reviews","REVIEWS_DATABASE_URL","review","isFavorite","arguments","length","undefined","method","JSON","stringify","is_favorite","headers","Content-Type","_ref$photograph","_ref","photograph","lg","sm","sm2x","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"helpers-bundle.js","sourcesContent":["\nfunction registerServiceWorker() {\n\tif (!navigator.serviceWorker) return;\n\n\twindow.addEventListener('load', function() {\n\t\tnavigator.serviceWorker.register('/sw.js').then(function(reg) {\n\t\t\tif (!navigator.serviceWorker.controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.waiting) {\n\t\t\t\tconsole.log('waiting');\n\t\t\t\t// indexController._updateReady(reg.waiting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.installing) {\n\t\t\t\tconsole.log('installing');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treg.addEventListener('updatefound', function() {\n\t\t\t\tconsole.log('updatefound');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t});\n\t\t});\n\n\t\t// Then later, request a one-off sync:\n\t\tnavigator.serviceWorker.ready.then(function(swRegistration) {\n\t\t\treturn swRegistration.sync.register('foodle-sync').catch((console.log));\n\t\t});\n\t});\n}\n\n// Connection Status\nfunction isOnline () {\n  var connectionStatus = document.getElementById('connection-status');\n\n  if (navigator.onLine){\n\t\t// runRetryRequests();\n    connectionStatus.classList.add('hidden');\n  } else {\n\t\tconnectionStatus.classList.remove('hidden');\n  }\n}\n\nwindow.addEventListener('online', isOnline);\nwindow.addEventListener('offline', isOnline);\nisOnline();\n\nregisterServiceWorker();\n","\nwindow.getScript = function(source, callback) {\n    var el = document.createElement('script');\n    el.onload = callback;\n    el.src = source;\n    \n    document.body.appendChild(el);\n}\n","const DATABASE_VERSION = 2;\r\n\r\nfunction _openDatabase() {\r\n  return idb.open('foodle', DATABASE_VERSION, upgradeDb => {\r\n    switch (upgradeDb.oldVersion) {\r\n      case 0: {\r\n        const store = upgradeDb.createObjectStore('restaurants', {\r\n          keyPath: 'id'\r\n        });\r\n        store.createIndex('id', 'id');\r\n        store.createIndex('by-date', 'createdAt'); \r\n      }\r\n      case 1: {\r\n        const store = upgradeDb.createObjectStore('reviews', {\r\n          keyPath: 'id'\r\n        });\r\n        store.createIndex('id', 'id');\r\n        store.createIndex('by-date', 'createdAt');\r\n        store.createIndex('by-restaurant', 'restaurant_id');\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst dbPromise = _openDatabase();\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelperClass {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  /**\r\n   * Reviews database URL.\r\n   */\r\n  static get REVIEWS_DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/reviews/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('by-date');\r\n\r\n        return index\r\n          .getAll()\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(() =>\r\n        fetch(DBHelper.DATABASE_URL)\r\n          .then(data => data.json())\r\n          .then(restaurants => {\r\n            // cache restaurants\r\n            dbPromise\r\n              .then(function(db) {\r\n                if (!db) return;\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n                const dateIndex = store.index('by-date');\r\n                restaurants.forEach(function(restaurant) {\r\n                  store.put(restaurant);\r\n                });\r\n                // There's not more than 10 restaurantsin the db at the moment\r\n                // but this would be needed if the db keep growing.\r\n                return dateIndex.openCursor(null, 'prev');\r\n              })\r\n              .then(cursor => {\r\n                if (!cursor) return;\r\n                // Store the last 10 restaurants\r\n                return cursor.advance(10);\r\n              })\r\n              .then(function removeOld(cursor) {\r\n                if (!cursor) return;\r\n                cursor.delete();\r\n                return cursor.continue().then(removeOld);\r\n              });\r\n\r\n            return restaurants;\r\n          })\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('id');\r\n\r\n        return index\r\n          .get(parseInt(id, 10))\r\n          .then(restaurant => { \r\n            callback(null, restaurant);\r\n            return restaurant;\r\n          })\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(cachedRestaurant =>\r\n        fetch(DBHelper.DATABASE_URL + id)\r\n          .then(data => data.json())\r\n          // cache the restaurant\r\n          .then(restaurant =>\r\n            dbPromise.then(function(db) {\r\n              if (!db) return;\r\n              const tx = db.transaction('restaurants', 'readwrite');\r\n              const store = tx.objectStore('restaurants');\r\n              store.put(restaurant);\r\n\r\n              return restaurant;\r\n            })\r\n          )\r\n          .then(restaurant => !cachedRestaurant && callback(null, restaurant))\r\n          .catch(error => callback(error, null))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch reviews by restaurant with proper error handling.\r\n   */\r\n  static fetchReviewsByRestaurant(rid, callback) {\r\n    dbPromise\r\n    .then(function(db) {\r\n      if (!db) return;\r\n      const index = db\r\n        .transaction('reviews')\r\n        .objectStore('reviews')\r\n        .index('by-restaurant');\r\n\r\n      return index\r\n        .getAll(parseInt(rid, 10))\r\n        .then(reviews => callback(null, reviews))\r\n        .catch(error => callback(error, null));\r\n    })\r\n    .then(() =>\r\n      fetch(`${DBHelper.REVIEWS_DATABASE_URL}?restaurant_id=${rid}`)\r\n        .then(data => data.json())\r\n        .then(reviews => {\r\n          // cache reviews\r\n          dbPromise\r\n            .then(function(db) {\r\n              if (!db) return;\r\n              const tx = db.transaction('reviews', 'readwrite');\r\n              const store = tx.objectStore('reviews');\r\n              const index = store.index('by-restaurant');\r\n\r\n              reviews.forEach(function(review) {\r\n                store.put(review);\r\n              });\r\n\r\n              return index.openCursor(null, 'prev');\r\n            })\r\n            .then(cursor => {\r\n              if (!cursor) return;\r\n              // Store the last 10 reviews\r\n              return cursor.advance(10);\r\n            })\r\n            .then(function removeOld(cursor) {\r\n              if (!cursor) return;\r\n              cursor.delete();\r\n              return cursor.continue().then(removeOld);\r\n            });\r\n\r\n          return reviews;\r\n        })\r\n        .then(reviews => callback(null, reviews))\r\n        .catch(error => callback(error, null))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Mark a restaurant as favorite\r\n   */\r\n  static markAsFavorite(rid, isFavorite, callback = () => null) {\r\n    fetch(`${DBHelper.DATABASE_URL}${rid}`, { \r\n      method: 'PUT',\r\n      body: JSON.stringify({ is_favorite: isFavorite && isFavorite !== 'false' ? true : false }),\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(data => data.json())\r\n      .then(restaurant => {\r\n        dbPromise.then(db => {\r\n          const tx = db.transaction('restaurants', 'readwrite');\r\n          const store = tx.objectStore('restaurants');\r\n\r\n          callback(null, restaurant);\r\n          return store.put(restaurant);\r\n        });\r\n      })\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Add a Review.\r\n   */\r\n  static addReview(review, callback = () => null) {\r\n    fetch(DBHelper.REVIEWS_DATABASE_URL, {\r\n      method: 'POST',\r\n      body: JSON.stringify(review),\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(data => data.json())\r\n    // cache the review\r\n    .then(review =>\r\n      dbPromise.then(function(db) {\r\n        if (!db) return;\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        store.put(review);\r\n\r\n        return review;\r\n      })\r\n    )\r\n    .then(review => callback(null, review))\r\n    .catch(error => {\r\n      callback(error, null); \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant({ photograph = 'foodle' }, size = 'lg') {\r\n    const imageSizes = {\r\n      lg: `${photograph}.jpg`,\r\n      sm: `${photograph}_sm.jpg`,\r\n      sm2x: `${photograph}_sm2x.jpg`\r\n    };\r\n    return `/img/${imageSizes[size]}`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\nwindow.DBHelper = DBHelperClass;\r\n"]}