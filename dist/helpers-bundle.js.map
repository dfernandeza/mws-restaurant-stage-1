{"version":3,"sources":["utils.js","offline.js","dbhelper.js"],"names":["window","getScript","source","callback","el","document","createElement","onload","src","body","appendChild","navigator","serviceWorker","addEventListener","register","then","reg","controller","waiting","console","log","installing","DATABASE_VERSION","dbPromise","idb","open","upgradeDb","oldVersion","store","createObjectStore","keyPath","createIndex","DBHelperClass","db","transaction","objectStore","index","getAll","restaurants","catch","error","fetch","DBHelper","DATABASE_URL","data","json","dateIndex","forEach","restaurant","put","openCursor","cursor","advance","removeOld","delete","continue","id","get","parseInt","cachedRestaurant","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","rid","isFavorite","arguments","length","undefined","method","JSON","stringify","is_favorite","headers","Content-Type","_ref$photograph","_ref","photograph","lg","sm","sm2x","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"helpers-bundle.js","sourcesContent":["\nwindow.getScript = function(source, callback) {\n    var el = document.createElement('script');\n    el.onload = callback;\n    el.src = source;\n    \n    document.body.appendChild(el);\n}\n","\nfunction registerServiceWorker() {\n\tif (!navigator.serviceWorker) return;\n\n\twindow.addEventListener('load', function() {\n\t\tnavigator.serviceWorker.register('/sw.js').then(function(reg) {\n\t\t\tif (!navigator.serviceWorker.controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.waiting) {\n\t\t\t\tconsole.log('waiting');\n\t\t\t\t// indexController._updateReady(reg.waiting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.installing) {\n\t\t\t\tconsole.log('installing');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treg.addEventListener('updatefound', function() {\n\t\t\t\tconsole.log('updatefound');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t});\n\t\t});\n\t});\n}\n\nregisterServiceWorker();\n","const DATABASE_VERSION = 1;\r\n\r\nfunction _openDatabase() {\r\n  return idb.open('foodle', DATABASE_VERSION, upgradeDb => {\r\n    switch (upgradeDb.oldVersion) {\r\n      case 0:\r\n        const store = upgradeDb.createObjectStore('restaurants', {\r\n          keyPath: 'id'\r\n        });\r\n        store.createIndex('id', 'id');\r\n        store.createIndex('by-date', 'createdAt');\r\n    }\r\n  });\r\n}\r\n\r\nconst dbPromise = _openDatabase();\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelperClass {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('by-date');\r\n\r\n        return index\r\n          .getAll()\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(() =>\r\n        fetch(DBHelper.DATABASE_URL)\r\n          .then(data => data.json())\r\n          .then(restaurants => {\r\n            // cache restaurants\r\n            dbPromise\r\n              .then(function(db) {\r\n                if (!db) return;\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n                const dateIndex = store.index('by-date');\r\n                restaurants.forEach(function(restaurant) {\r\n                  store.put(restaurant);\r\n                });\r\n                // There's not more than 10 restaurantsin the db at the moment\r\n                // but this would be needed if the db keep growing.\r\n                return dateIndex.openCursor(null, 'prev');\r\n              })\r\n              .then(cursor => {\r\n                if (!cursor) return;\r\n                // Store the last 10 restaurants\r\n                return cursor.advance(10);\r\n              })\r\n              .then(function removeOld(cursor) {\r\n                if (!cursor) return;\r\n                cursor.delete();\r\n                return cursor.continue().then(removeOld);\r\n              });\r\n\r\n            return restaurants;\r\n          })\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('id');\r\n\r\n        return index\r\n          .get(parseInt(id, 10))\r\n          .then(restaurant => { \r\n            callback(null, restaurant);\r\n            return restaurant;\r\n          })\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(cachedRestaurant =>\r\n        fetch(DBHelper.DATABASE_URL + id)\r\n          .then(data => data.json())\r\n          // cache the restaurant\r\n          .then(restaurant =>\r\n            dbPromise.then(function(db) {\r\n              if (!db) return;\r\n              const tx = db.transaction('restaurants', 'readwrite');\r\n              const store = tx.objectStore('restaurants');\r\n              store.put(restaurant);\r\n\r\n              return restaurant;\r\n            })\r\n          )\r\n          .then(restaurant => !cachedRestaurant && callback(null, restaurant))\r\n          .catch(error => callback(error, null))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mark a restaurant as favorite\r\n   */\r\n  static markAsFavorite(rid, isFavorite, callback = () => null) {\r\n    fetch(`${DBHelper.DATABASE_URL}${rid}`, { \r\n      method: 'PUT',\r\n      body: JSON.stringify({ is_favorite: isFavorite && isFavorite !== 'false' ? true : false }),\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(data => data.json())\r\n      .then(restaurant => {\r\n        dbPromise.then(db => {\r\n          const tx = db.transaction('restaurants', 'readwrite');\r\n          const store = tx.objectStore('restaurants');\r\n\r\n          callback(null, restaurant);\r\n          return store.put(restaurant);\r\n        });\r\n      })\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant({ photograph = 'foodle' }, size = 'lg') {\r\n    const imageSizes = {\r\n      lg: `${photograph}.jpg`,\r\n      sm: `${photograph}_sm.jpg`,\r\n      sm2x: `${photograph}_sm2x.jpg`\r\n    };\r\n    return `/img/${imageSizes[size]}`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\nwindow.DBHelper = DBHelperClass;\r\n"]}