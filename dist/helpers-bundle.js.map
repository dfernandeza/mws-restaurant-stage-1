{"version":3,"sources":["offline.js","dbhelper.js"],"names":["navigator","serviceWorker","window","addEventListener","register","then","reg","controller","waiting","console","log","installing","DATABASE_VERSION","dbPromise","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","Promise","resolve","DBHelperClass","callback","db","transaction","objectStore","index","getAll","restaurants","catch","error","fetch","DBHelper","DATABASE_URL","data","json","store","dateIndex","forEach","restaurant","put","openCursor","cursor","advance","removeOld","delete","continue","id","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","_ref$photograph","_ref","photograph","undefined","lg","sm","sm2x","arguments","length","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"helpers-bundle.js","sourcesContent":["\nfunction registerServiceWorker() {\n\tif (!navigator.serviceWorker) return;\n\n\twindow.addEventListener('load', function() {\n\t\tnavigator.serviceWorker.register('/sw.js').then(function(reg) {\n\t\t\tif (!navigator.serviceWorker.controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.waiting) {\n\t\t\t\tconsole.log('waiting');\n\t\t\t\t// indexController._updateReady(reg.waiting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.installing) {\n\t\t\t\tconsole.log('installing');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treg.addEventListener('updatefound', function() {\n\t\t\t\tconsole.log('updatefound');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t});\n\t\t});\n\t});\n}\n\nregisterServiceWorker();\n","const DATABASE_VERSION = 1;\r\n\r\nfunction _openDatabase() {\r\n  if (!navigator.serviceWorker) {\r\n    return Promise.resolve();\r\n  }\r\n  return idb.open('foodle', DATABASE_VERSION, upgradeDb => {\r\n    const store = upgradeDb.createObjectStore('restaurants', {\r\n      keyPath: 'id'\r\n    });\r\n    store.createIndex('by-date', 'createdAt');\r\n  });\r\n}\r\n\r\nconst dbPromise = _openDatabase();\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelperClass {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('by-date');\r\n\r\n        return index\r\n          .getAll()\r\n          .then(function(restaurants) {\r\n            callback(null, restaurants);\r\n          })\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(() => {\r\n        fetch(DBHelper.DATABASE_URL)\r\n          .then(data => data.json())\r\n          .then(restaurants => {\r\n            // cache restaurants\r\n            dbPromise\r\n              .then(function(db) {\r\n                if (!db) return;\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n                const dateIndex = store.index('by-date');\r\n                restaurants.forEach(function(restaurant) {\r\n                  store.put(restaurant);\r\n                });\r\n                // There's not more than 10 restaurantsin the db at the moment\r\n                // but this would be needed if the db keep growing.\r\n                return dateIndex.openCursor(null, 'prev');\r\n              })\r\n              .then(cursor => {\r\n                if (!cursor) return;\r\n                return cursor.advance(10);\r\n              })\r\n              .then(function removeOld(cursor) {\r\n                if (!cursor) return;\r\n                cursor.delete();\r\n                return cursor.continue().then(removeOld);\r\n              });\r\n\r\n            return restaurants;\r\n          })\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(DBHelper.DATABASE_URL + id)\r\n      .then(data => data.json())\r\n      .then(restaurant => callback(null, restaurant))\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant({ photograph = '1' }, size = 'lg') {\r\n    const imageSizes = {\r\n      lg: `${photograph}.jpg`,\r\n      sm: `${photograph}_sm.jpg`,\r\n      sm2x: `${photograph}_sm2x.jpg`\r\n    };\r\n    return `/img/${imageSizes[size]}`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\nwindow.DBHelper = DBHelperClass;\r\n"]}