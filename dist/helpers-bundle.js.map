{"version":3,"sources":["offline.js","dbhelper.js"],"names":["navigator","serviceWorker","window","addEventListener","register","then","reg","controller","waiting","console","log","installing","DBHelperClass","callback","fetch","DBHelper","DATABASE_URL","data","json","restaurants","catch","error","id","restaurant","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","_ref$photograph","_ref","photograph","undefined","lg","sm","sm2x","arguments","length","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"AAEMA,UAAUC,eAEfC,OAAOC,iBAAiB,OAAQ,WAC/BH,UAAUC,cAAcG,SAAS,UAAUC,KAAK,SAASC,GACnDN,UAAUC,cAAcM,aAIzBD,EAAIE,QACPC,QAAQC,IAAI,WAKTJ,EAAIK,WACPF,QAAQC,IAAI,cAKbJ,EAAIH,iBAAiB,cAAe,WACnCM,QAAQC,IAAI,mRCpBVE,wOAcoBC,GACtBC,MAAMC,SAASC,cACZX,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAClBb,KAAK,SAAAc,GAAA,OAAeN,EAAS,KAAMM,KACnCC,MAAM,SAAAC,GAAA,OAASR,EAASQ,EAAO,oDAMTC,EAAIT,GAC7BC,MAAMC,SAASC,aAAeM,GAC3BjB,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAClBb,KAAK,SAAAkB,GAAA,OAAcV,EAAS,KAAMU,KAClCH,MAAM,SAAAC,GAAA,OAASR,EAASQ,EAAO,yDAMJG,EAASX,GAEvCE,SAASU,iBAAiB,SAACJ,EAAOF,GAEhC,GADAV,QAAQC,IAAIS,GACRE,EACFR,EAASQ,EAAO,UACX,CAEL,IAAMK,EAAUP,EAAYQ,OAAO,SAAAC,GAAA,OAAKA,EAAEC,cAAgBL,IAC1DX,EAAS,KAAMa,4DAQgBI,EAAcjB,GAEjDE,SAASU,iBAAiB,SAACJ,EAAOF,GAChC,GAAIE,EACFR,EAASQ,EAAO,UACX,CAEL,IAAMK,EAAUP,EAAYQ,OAAO,SAAAC,GAAA,OAAKA,EAAEE,cAAgBA,IAC1DjB,EAAS,KAAMa,sEAQ0BF,EAASM,EAAcjB,GAEpEE,SAASU,iBAAiB,SAACJ,EAAOF,GAEhC,GADAV,QAAQC,IAAIS,GACRE,EACFR,EAASQ,EAAO,UACX,CACL,IAAIK,EAAUP,EACC,OAAXK,IACFE,EAAUA,EAAQC,OAAO,SAAAC,GAAA,OAAKA,EAAEC,cAAgBL,KAE9B,OAAhBM,IACFJ,EAAUA,EAAQC,OAAO,SAAAC,GAAA,OAAKA,EAAEE,cAAgBA,KAElDjB,EAAS,KAAMa,iDAQKb,GAExBE,SAASU,iBAAiB,SAACJ,EAAOF,GAChC,GAAIE,EACFR,EAASQ,EAAO,UACX,CAEL,IAAMU,EAAgBZ,EAAYa,IAAI,SAACC,EAAGC,GAAJ,OAAUf,EAAYe,GAAGJ,eAEzDK,EAAsBJ,EAAcJ,OAAO,SAACM,EAAGC,GAAJ,OAAUH,EAAcK,QAAQH,IAAMC,IACvFrB,EAAS,KAAMsB,4CAQAtB,GAEnBE,SAASU,iBAAiB,SAACJ,EAAOF,GAChC,GAAIE,EACFR,EAASQ,EAAO,UACX,CAEL,IAAMgB,EAAWlB,EAAYa,IAAI,SAACC,EAAGC,GAAJ,OAAUf,EAAYe,GAAGL,eAEpDS,EAAiBD,EAASV,OAAO,SAACM,EAAGC,GAAJ,OAAUG,EAASD,QAAQH,IAAMC,IACxErB,EAAS,KAAMyB,+CAQGf,GACtB,MAAA,wBAAgCA,EAAWD,oDAMmB,IAAAiB,EAAAC,EAAjCC,WAAAA,OAAiCC,IAAAH,EAApB,IAAoBA,EAM9D,MAAA,QALmB,CACjBI,GAAOF,EAAP,OACAG,GAAOH,EAAP,UACAI,KAASJ,EAAT,aAJ4D,EAAAK,UAAAC,aAAAL,IAAAI,UAAA,GAAAA,UAAA,GAAN,qDAY5BvB,EAAYS,GAQxC,OAPe,IAAIgB,OAAOC,KAAKC,OAAO,CACpCC,SAAU5B,EAAW6B,OACrBC,MAAO9B,EAAW+B,KAClBC,IAAKxC,SAASyC,iBAAiBjC,GAC/BS,IAAKA,EACLyB,UAAWT,OAAOC,KAAKS,UAAUC,4CA9InC,MAAA,0DAqJJzD,OAAOa,SAAWH","file":"helpers-bundle.js","sourcesContent":["\nfunction registerServiceWorker() {\n\tif (!navigator.serviceWorker) return;\n\n\twindow.addEventListener('load', function() {\n\t\tnavigator.serviceWorker.register('/sw.js').then(function(reg) {\n\t\t\tif (!navigator.serviceWorker.controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.waiting) {\n\t\t\t\tconsole.log('waiting');\n\t\t\t\t// indexController._updateReady(reg.waiting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.installing) {\n\t\t\t\tconsole.log('installing');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treg.addEventListener('updatefound', function() {\n\t\t\t\tconsole.log('updatefound');\n\t\t\t\t// indexController._trackInstalling(reg.installing);\n\t\t\t});\n\t\t});\n\t});\n}\n\nregisterServiceWorker();\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelperClass {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {    \r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(data => data.json())\r\n      .then(restaurants => callback(null, restaurants))\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(DBHelper.DATABASE_URL + id)\r\n      .then(data => data.json())\r\n      .then(restaurant => callback(null, restaurant))\r\n      .catch(error => callback(error, null));;\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      console.log(restaurants);\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      console.log(restaurants);\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant({ photograph = '1' }, size = 'lg') {\r\n    const imageSizes = {\r\n      lg: `${photograph}.jpg`,\r\n      sm: `${photograph}_sm.jpg`, // photograph.replace('.jpg', '_sm.jpg'),\r\n      sm2x: `${photograph}_sm2x.jpg`// photograph.replace('.jpg', '_sm2x.jpg')\r\n    };\r\n    return (`/img/${imageSizes[size]}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nwindow.DBHelper = DBHelperClass;\r\n"]}