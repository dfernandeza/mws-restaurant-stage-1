{"version":3,"sources":["utils.js","dbhelper.js","offline.js"],"names":["window","getScript","source","callback","el","document","createElement","onload","src","body","appendChild","DATABASE_VERSION","dbPromise","idb","open","upgradeDb","oldVersion","store","createObjectStore","keyPath","createIndex","autoIncrement","DBHelperClass","then","db","transaction","objectStore","index","getAll","restaurants","catch","error","fetch","DBHelper","DATABASE_URL","data","json","dateIndex","forEach","restaurant","put","openCursor","cursor","advance","removeOld","delete","continue","id","get","parseInt","cachedRestaurant","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","rid","reviews","REVIEWS_DATABASE_URL","review","isFavorite","arguments","length","undefined","method","JSON","stringify","is_favorite","headers","Content-Type","request","tx","requests","iterateCursor","push","value","complete","_ref$photograph","_ref","photograph","lg","sm","sm2x","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","retryPendingRequests","fetchPendingRequests","pendingRequests","req","console","log","isOnline","connectionStatus","getElementById","navigator","onLine","classList","add","remove","addEventListener","serviceWorker","register","reg","controller","waiting","installing","event","message","addPendingRequest","ready","swRegistration","sync"],"mappings":"AACAA,OAAOC,UAAY,SAASC,EAAQC,GAChC,IAAIC,EAAKC,SAASC,cAAc,UAChCF,EAAGG,OAASJ,EACZC,EAAGI,IAAMN,EAETG,SAASI,KAAKC,YAAYN,6PCN9B,IAAMO,EAAmB,EA+BzB,IAAMC,EA5BGC,IAAIC,KAAK,SAAUH,EAAkB,SAAAI,GAC1C,OAAQA,EAAUC,YAChB,KAAK,EACH,IAAMC,EAAQF,EAAUG,kBAAkB,cAAe,CACvDC,QAAS,OAEXF,EAAMG,YAAY,KAAM,MACxBH,EAAMG,YAAY,UAAW,aAE/B,KAAK,EACH,IAAMH,EAAQF,EAAUG,kBAAkB,UAAW,CACnDC,QAAS,OAEXF,EAAMG,YAAY,KAAM,MACxBH,EAAMG,YAAY,UAAW,aAC7BH,EAAMG,YAAY,gBAAiB,iBAErC,KAAK,EACWL,EAAUG,kBAAkB,mBAAoB,CAC5DC,QAAS,KACTE,eAAe,IAEXD,YAAY,UAAW,gBAW/BE,wOAqBoBnB,GACtBS,EACGW,KAAK,SAASC,GACb,GAAKA,EAML,OALcA,EACXC,YAAY,eACZC,YAAY,eACZC,MAAM,WAGNC,SACAL,KAAK,SAAAM,GAAA,OAAe1B,EAAS,KAAM0B,KACnCC,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,UAEnCR,KAAK,WAAA,OACJS,MAAMC,SAASC,cACZX,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAClBb,KAAK,SAAAM,GA0BJ,OAxBAjB,EACGW,KAAK,SAASC,GACb,GAAKA,EAAL,CACA,IACMP,EADKO,EAAGC,YAAY,cAAe,aACxBC,YAAY,eACvBW,EAAYpB,EAAMU,MAAM,WAM9B,OALAE,EAAYS,QAAQ,SAASC,GAC3BtB,EAAMuB,IAAID,KAILF,EAAUI,WAAW,KAAM,WAEnClB,KAAK,SAAAmB,GACJ,GAAKA,EAEL,OAAOA,EAAOC,QAAQ,MAEvBpB,KAAK,SAASqB,EAAUF,GACvB,GAAKA,EAEL,OADAA,EAAOG,SACAH,EAAOI,WAAWvB,KAAKqB,KAG3Bf,IAERN,KAAK,SAAAM,GAAA,OAAe1B,EAAS,KAAM0B,KACnCC,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,sDAObgB,EAAI5C,GAC7BS,EACGW,KAAK,SAASC,GACb,GAAKA,EAML,OALcA,EACXC,YAAY,eACZC,YAAY,eACZC,MAAM,MAGNqB,IAAIC,SAASF,EAAI,KACjBxB,KAAK,SAAAgB,GAEJ,OADApC,EAAS,KAAMoC,GACRA,IAERT,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,UAEnCR,KAAK,SAAA2B,GAAA,OACJlB,MAAMC,SAASC,aAAea,GAC3BxB,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAElBb,KAAK,SAAAgB,GAAA,OACJ3B,EAAUW,KAAK,SAASC,GACtB,GAAKA,EAKL,OAJWA,EAAGC,YAAY,cAAe,aACxBC,YAAY,eACvBc,IAAID,GAEHA,MAGVhB,KAAK,SAAAgB,GAAA,OAAeW,GAAoB/C,EAAS,KAAMoC,KACvDT,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,2DAORoB,EAAShD,GAEvC8B,SAASmB,iBAAiB,SAACrB,EAAOF,GAChC,GAAIE,EACF5B,EAAS4B,EAAO,UACX,CAEL,IAAMsB,EAAUxB,EAAYyB,OAAO,SAAAC,GAAA,OAAKA,EAAEC,cAAgBL,IAC1DhD,EAAS,KAAMkD,4DAQgBI,EAActD,GAEjD8B,SAASmB,iBAAiB,SAACrB,EAAOF,GAChC,GAAIE,EACF5B,EAAS4B,EAAO,UACX,CAEL,IAAMsB,EAAUxB,EAAYyB,OAAO,SAAAC,GAAA,OAAKA,EAAEE,cAAgBA,IAC1DtD,EAAS,KAAMkD,sEASnBF,EACAM,EACAtD,GAGA8B,SAASmB,iBAAiB,SAACrB,EAAOF,GAChC,GAAIE,EACF5B,EAAS4B,EAAO,UACX,CACL,IAAIsB,EAAUxB,EACC,OAAXsB,IAEFE,EAAUA,EAAQC,OAAO,SAAAC,GAAA,OAAKA,EAAEC,cAAgBL,KAE9B,OAAhBM,IAEFJ,EAAUA,EAAQC,OAAO,SAAAC,GAAA,OAAKA,EAAEE,cAAgBA,KAElDtD,EAAS,KAAMkD,iDAQKlD,GAExB8B,SAASmB,iBAAiB,SAACrB,EAAOF,GAChC,GAAIE,EACF5B,EAAS4B,EAAO,UACX,CAEL,IAAM2B,EAAgB7B,EAAY8B,IAChC,SAACC,EAAGC,GAAJ,OAAUhC,EAAYgC,GAAGJ,eAGrBK,EAAsBJ,EAAcJ,OACxC,SAACM,EAAGC,GAAJ,OAAUH,EAAcK,QAAQH,IAAMC,IAExC1D,EAAS,KAAM2D,4CAQA3D,GAEnB8B,SAASmB,iBAAiB,SAACrB,EAAOF,GAChC,GAAIE,EACF5B,EAAS4B,EAAO,UACX,CAEL,IAAMiC,EAAWnC,EAAY8B,IAAI,SAACC,EAAGC,GAAJ,OAAUhC,EAAYgC,GAAGL,eAEpDS,EAAiBD,EAASV,OAC9B,SAACM,EAAGC,GAAJ,OAAUG,EAASD,QAAQH,IAAMC,IAEnC1D,EAAS,KAAM8D,uDAQWC,EAAK/D,GACnCS,EACCW,KAAK,SAASC,GACb,GAAKA,EAML,OALcA,EACXC,YAAY,WACZC,YAAY,WACZC,MAAM,iBAGNC,OAAOqB,SAASiB,EAAK,KACrB3C,KAAK,SAAA4C,GAAA,OAAWhE,EAAS,KAAMgE,KAC/BrC,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,UAEnCR,KAAK,WAAA,OACJS,MAASC,SAASmC,qBAAlB,kBAAwDF,GACrD3C,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAClBb,KAAK,SAAA4C,GA0BJ,OAxBAvD,EACGW,KAAK,SAASC,GACb,GAAKA,EAAL,CACA,IACMP,EADKO,EAAGC,YAAY,UAAW,aACpBC,YAAY,WACvBC,EAAQV,EAAMU,MAAM,iBAM1B,OAJAwC,EAAQ7B,QAAQ,SAAS+B,GACvBpD,EAAMuB,IAAI6B,KAGL1C,EAAMc,WAAW,KAAM,WAE/BlB,KAAK,SAAAmB,GACJ,GAAKA,EAEL,OAAOA,EAAOC,QAAQ,MAEvBpB,KAAK,SAASqB,EAAUF,GACvB,GAAKA,EAEL,OADAA,EAAOG,SACAH,EAAOI,WAAWvB,KAAKqB,KAG3BuB,IAER5C,KAAK,SAAA4C,GAAA,OAAWhE,EAAS,KAAMgE,KAC/BrC,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,iDAOhBmC,EAAKI,GAAmC,IAAvBnE,EAAuB,EAAAoE,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,WAAA,OAAM,MACtDvC,MAAAA,GAASC,SAASC,aAAegC,EAAO,CACtCQ,OAAQ,MACRjE,KAAMkE,KAAKC,UAAU,CAAEC,eAAaP,GAA6B,UAAfA,KAClDQ,QAAQ,CACNC,eAAgB,sBAGjBxD,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAClBb,KAAK,SAAAgB,GACJ3B,EAAUW,KAAK,SAAAC,GACb,IACMP,EADKO,EAAGC,YAAY,cAAe,aACxBC,YAAY,eAG7B,OADAvB,EAAS,KAAMoC,GACRtB,EAAMuB,IAAID,OAGpBT,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,0CAMnBsC,GAA+B,IAAvBlE,EAAuB,EAAAoE,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,WAAA,OAAM,MACxCvC,MAAMC,SAASmC,qBAAsB,CACnCM,OAAQ,OACRjE,KAAMkE,KAAKC,UAAUP,GACrBS,QAAQ,CACNC,eAAgB,sBAGnBxD,KAAK,SAAAY,GAAA,OAAQA,EAAKC,SAElBb,KAAK,SAAA8C,GAAA,OACJzD,EAAUW,KAAK,SAASC,GACtB,GAAKA,EAKL,OAJWA,EAAGC,YAAY,UAAW,aACpBC,YAAY,WACvBc,IAAI6B,GAEHA,MAGV9C,KAAK,SAAA8C,GAAA,OAAUlE,EAAS,KAAMkE,KAC9BvC,MAAM,SAAAC,GACL5B,EAAS4B,EAAO,kDAOKiD,GAAgC,IAAvB7E,EAAuB,EAAAoE,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,WAAA,OAAM,MACjD3D,EACGW,KAAK,SAASC,GACb,GAAKA,EAKL,OAJWA,EAAGC,YAAY,mBAAoB,aAC7BC,YAAY,oBACvBc,IAAIwC,GAEHA,IAERzD,KAAK,SAAAyD,GAAA,OAAW7E,EAAS,KAAM6E,KAC/BlD,MAAM,SAAAC,GACL5B,EAAS4B,EAAO,uDAO6B,IAAvB5B,EAAuB,EAAAoE,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,WAAA,OAAM,MAC3C3D,EACGW,KAAK,SAASC,GACb,GAAKA,EAAL,CACA,IAAMyD,EAAKzD,EAAGC,YAAY,mBAAoB,aACxCyD,EAAW,GAEjBD,EACCvD,YAAY,oBACZyD,cAAc,SAAAzC,GACNA,IACLwC,EAASE,KAAK1C,EAAO2C,OACrB3C,EAAOG,SACPH,EAAOI,cAGTmC,EAAGK,SACF/D,KAAK,WAAA,OAAMpB,EAAS,KAAM+E,KAC1BpD,MAAM,SAAAC,GAAA,OAAS5B,EAAS4B,EAAO,oDAOhBQ,GACtB,MAAA,wBAA+BA,EAAWQ,oDAMyB,IAAAwC,EAAAC,EAAtCC,WAAAA,OAAsChB,IAAAc,EAAzB,SAAyBA,EAMnE,MAAA,QALmB,CACjBG,GAAOD,EAAP,OACAE,GAAOF,EAAP,UACAG,KAASH,EAAT,aAJiE,EAAAlB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,qDAYjChC,EAAYoB,GAQxC,OAPe,IAAIkC,OAAOC,KAAKC,OAAO,CACpCC,SAAUzD,EAAW0D,OACrBC,MAAO3D,EAAW4D,KAClBC,IAAKnE,SAASoE,iBAAiB9D,GAC/BoB,IAAKA,EACL2C,UAAWT,OAAOC,KAAKS,UAAUC,4CA9XnC,MAAA,kFAQA,MAAA,sDCPJ,SAASC,IACRxE,SAASyE,qBAAqB,SAAC3E,EAAO4E,GACjC5E,GAIJ4E,EAAgBrE,QAAQ,SAAAsE,GAAO,IACtBR,EAAsBQ,EAAtBR,IAAK1B,EAAiBkC,EAAjBlC,OAAQjE,EAASmG,EAATnG,KACrBoG,QAAQC,IAAI,aAAcF,GAC1B5E,MAAMoE,EAAK,CACV1B,OAAAA,EACAjE,KAAMkE,KAAKC,UAAUnE,GACrBqE,QAAQ,CACPC,eAAgB,0BAQrB,SAASgC,IACP,IAAIC,EAAmB3G,SAAS4G,eAAe,qBAE3CC,UAAUC,QACdV,IACEO,EAAiBI,UAAUC,IAAI,WAEjCL,EAAiBI,UAAUE,OAAO,UDuWpCtH,OAAOiC,SAAWX,cCnWlBtB,OAAOuH,iBAAiB,SAAUR,GAClC/G,OAAOuH,iBAAiB,UAAWR,GACnCA,IA5EMG,UAAUM,eAEfxH,OAAOuH,iBAAiB,OAAQ,WAC/BL,UAAUM,cAAcC,SAAS,UAAUlG,KAAK,SAASmG,GACnDR,UAAUM,cAAcG,aAIzBD,EAAIE,QACPf,QAAQC,IAAI,WAKTY,EAAIG,WACPhB,QAAQC,IAAI,cAKbY,EAAIH,iBAAiB,cAAe,WACnCV,QAAQC,IAAI,oBAKdI,UAAUM,cAAcD,iBAAiB,UAAW,SAAAO,GACxB,mBAAvBA,EAAM3F,KAAK4F,SACd9F,SAAS+F,kBAAkBF,EAAM3F,KAAK6C,SACtC6B,QAAQC,IAAI,kBAAmBgB,EAAM3F,KAAK6C,UACT,SAAvB8C,EAAM3F,KAAK4F,SACrBtB,MAKFS,UAAUM,cAAcS,MAAM1G,KAAK,SAAS2G,GAC3C,OAAOA,EAAeC,KAAKV,SAAS,eAAe3F,MAAO+E,QAAQC","file":"helpers-bundle.js","sourcesContent":["\nwindow.getScript = function(source, callback) {\n    var el = document.createElement('script');\n    el.onload = callback;\n    el.src = source;\n    \n    document.body.appendChild(el);\n}\n","const DATABASE_VERSION = 3;\r\n\r\nfunction _openDatabase() {\r\n  return idb.open('foodle', DATABASE_VERSION, upgradeDb => {\r\n    switch (upgradeDb.oldVersion) {\r\n      case 0: {\r\n        const store = upgradeDb.createObjectStore('restaurants', {\r\n          keyPath: 'id'\r\n        });\r\n        store.createIndex('id', 'id');\r\n        store.createIndex('by-date', 'createdAt'); \r\n      }\r\n      case 1: {\r\n        const store = upgradeDb.createObjectStore('reviews', {\r\n          keyPath: 'id'\r\n        });\r\n        store.createIndex('id', 'id');\r\n        store.createIndex('by-date', 'createdAt');\r\n        store.createIndex('by-restaurant', 'restaurant_id');\r\n      }\r\n      case 2: {\r\n        const store = upgradeDb.createObjectStore('pending_requests', {\r\n          keyPath: 'id',\r\n          autoIncrement: true\r\n        });\r\n        store.createIndex('by-date', 'createdAt');\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst dbPromise = _openDatabase();\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelperClass {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  /**\r\n   * Reviews database URL.\r\n   */\r\n  static get REVIEWS_DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}/reviews/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('by-date');\r\n\r\n        return index\r\n          .getAll()\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(() =>\r\n        fetch(DBHelper.DATABASE_URL)\r\n          .then(data => data.json())\r\n          .then(restaurants => {\r\n            // cache restaurants\r\n            dbPromise\r\n              .then(function(db) {\r\n                if (!db) return;\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n                const dateIndex = store.index('by-date');\r\n                restaurants.forEach(function(restaurant) {\r\n                  store.put(restaurant);\r\n                });\r\n                // There's not more than 10 restaurantsin the db at the moment\r\n                // but this would be needed if the db keep growing.\r\n                return dateIndex.openCursor(null, 'prev');\r\n              })\r\n              .then(cursor => {\r\n                if (!cursor) return;\r\n                // Store the last 10 restaurants\r\n                return cursor.advance(10);\r\n              })\r\n              .then(function removeOld(cursor) {\r\n                if (!cursor) return;\r\n                cursor.delete();\r\n                return cursor.continue().then(removeOld);\r\n              });\r\n\r\n            return restaurants;\r\n          })\r\n          .then(restaurants => callback(null, restaurants))\r\n          .catch(error => callback(error, null))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const index = db\r\n          .transaction('restaurants')\r\n          .objectStore('restaurants')\r\n          .index('id');\r\n\r\n        return index\r\n          .get(parseInt(id, 10))\r\n          .then(restaurant => { \r\n            callback(null, restaurant);\r\n            return restaurant;\r\n          })\r\n          .catch(error => callback(error, null));\r\n      })\r\n      .then(cachedRestaurant =>\r\n        fetch(DBHelper.DATABASE_URL + id)\r\n          .then(data => data.json())\r\n          // cache the restaurant\r\n          .then(restaurant =>\r\n            dbPromise.then(function(db) {\r\n              if (!db) return;\r\n              const tx = db.transaction('restaurants', 'readwrite');\r\n              const store = tx.objectStore('restaurants');\r\n              store.put(restaurant);\r\n\r\n              return restaurant;\r\n            })\r\n          )\r\n          .then(restaurant => !cachedRestaurant && callback(null, restaurant))\r\n          .catch(error => callback(error, null))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch reviews by restaurant with proper error handling.\r\n   */\r\n  static fetchReviewsByRestaurant(rid, callback) {\r\n    dbPromise\r\n    .then(function(db) {\r\n      if (!db) return;\r\n      const index = db\r\n        .transaction('reviews')\r\n        .objectStore('reviews')\r\n        .index('by-restaurant');\r\n\r\n      return index\r\n        .getAll(parseInt(rid, 10))\r\n        .then(reviews => callback(null, reviews))\r\n        .catch(error => callback(error, null));\r\n    })\r\n    .then(() =>\r\n      fetch(`${DBHelper.REVIEWS_DATABASE_URL}?restaurant_id=${rid}`)\r\n        .then(data => data.json())\r\n        .then(reviews => {\r\n          // cache reviews\r\n          dbPromise\r\n            .then(function(db) {\r\n              if (!db) return;\r\n              const tx = db.transaction('reviews', 'readwrite');\r\n              const store = tx.objectStore('reviews');\r\n              const index = store.index('by-restaurant');\r\n\r\n              reviews.forEach(function(review) {\r\n                store.put(review);\r\n              });\r\n\r\n              return index.openCursor(null, 'prev');\r\n            })\r\n            .then(cursor => {\r\n              if (!cursor) return;\r\n              // Store the last 10 reviews\r\n              return cursor.advance(10);\r\n            })\r\n            .then(function removeOld(cursor) {\r\n              if (!cursor) return;\r\n              cursor.delete();\r\n              return cursor.continue().then(removeOld);\r\n            });\r\n\r\n          return reviews;\r\n        })\r\n        .then(reviews => callback(null, reviews))\r\n        .catch(error => callback(error, null))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Mark a restaurant as favorite\r\n   */\r\n  static markAsFavorite(rid, isFavorite, callback = () => null) {\r\n    fetch(`${DBHelper.DATABASE_URL}${rid}`, { \r\n      method: 'PUT',\r\n      body: JSON.stringify({ is_favorite: isFavorite && isFavorite !== 'false' ? true : false }),\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(data => data.json())\r\n      .then(restaurant => {\r\n        dbPromise.then(db => {\r\n          const tx = db.transaction('restaurants', 'readwrite');\r\n          const store = tx.objectStore('restaurants');\r\n\r\n          callback(null, restaurant);\r\n          return store.put(restaurant);\r\n        });\r\n      })\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Add a Review.\r\n   */\r\n  static addReview(review, callback = () => null) {\r\n    fetch(DBHelper.REVIEWS_DATABASE_URL, {\r\n      method: 'POST',\r\n      body: JSON.stringify(review),\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(data => data.json())\r\n    // cache the review\r\n    .then(review =>\r\n      dbPromise.then(function(db) {\r\n        if (!db) return;\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        store.put(review);\r\n\r\n        return review;\r\n      })\r\n    )\r\n    .then(review => callback(null, review))\r\n    .catch(error => {\r\n      callback(error, null); \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add pending request\r\n   */\r\n  static addPendingRequest(request, callback = () => null) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const tx = db.transaction('pending_requests', 'readwrite');\r\n        const store = tx.objectStore('pending_requests');\r\n        store.put(request);\r\n\r\n        return request;\r\n      })\r\n      .then(request => callback(null, request))\r\n      .catch(error => {\r\n        callback(error, null); \r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch all pending requests and empty the cache \r\n   */\r\n  static fetchPendingRequests(callback = () => null) {\r\n    dbPromise\r\n      .then(function(db) {\r\n        if (!db) return;\r\n        const tx = db.transaction('pending_requests', 'readwrite');\r\n        const requests = [];\r\n\r\n        tx\r\n        .objectStore('pending_requests')\r\n        .iterateCursor(cursor => {\r\n            if (!cursor) return;\r\n            requests.push(cursor.value);\r\n            cursor.delete();\r\n            cursor.continue();\r\n          });\r\n\r\n          tx.complete\r\n          .then(() => callback(null, requests))\r\n          .catch(error => callback(error, null));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant({ photograph = 'foodle' }, size = 'lg') {\r\n    const imageSizes = {\r\n      lg: `${photograph}.jpg`,\r\n      sm: `${photograph}_sm.jpg`,\r\n      sm2x: `${photograph}_sm2x.jpg`\r\n    };\r\n    return `/img/${imageSizes[size]}`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\nwindow.DBHelper = DBHelperClass;\r\n","\nfunction registerServiceWorker() {\n\tif (!navigator.serviceWorker) return;\n\n\twindow.addEventListener('load', function() {\n\t\tnavigator.serviceWorker.register('/sw.js').then(function(reg) {\n\t\t\tif (!navigator.serviceWorker.controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.waiting) {\n\t\t\t\tconsole.log('waiting');\n\t\t\t\t// updateReady(reg.waiting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (reg.installing) {\n\t\t\t\tconsole.log('installing');\n\t\t\t\t// trackInstalling(reg.installing);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treg.addEventListener('updatefound', function() {\n\t\t\t\tconsole.log('updatefound');\n\t\t\t\t// trackInstalling(reg.installing);\n\t\t\t});\n\t\t});\n\n\t\tnavigator.serviceWorker.addEventListener('message', event => {\n\t\t\tif (event.data.message === 'failed_request') {\n\t\t\t\tDBHelper.addPendingRequest(event.data.request);\n\t\t\t\tconsole.log('Failed request:', event.data.request);\n\t\t\t} else if (event.data.message === 'sync') {\n\t\t\t\tretryPendingRequests();\n\t\t\t}\n\t\t});\n\n\t\t// Request a one-off sync\n\t\tnavigator.serviceWorker.ready.then(function(swRegistration) {\n\t\t\treturn swRegistration.sync.register('foodle-sync').catch((console.log));\n\t\t});\n\t});\n}\n\nfunction retryPendingRequests() {\n\tDBHelper.fetchPendingRequests((error, pendingRequests) => {\n\t\tif (error) {\n\t\t\treturn;\n\t\t}\n\t\t// Retry requests\n\t\tpendingRequests.forEach(req => {\n\t\t\tconst { url, method, body } = req;\n\t\t\tconsole.log('retrying: ', req);\n\t\t\tfetch(url, {\n\t\t\t\tmethod,\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\theaders:{\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n\n// Connection Status\nfunction isOnline () {\n  var connectionStatus = document.getElementById('connection-status');\n\n  if (navigator.onLine){\n\t\tretryPendingRequests();\n    connectionStatus.classList.add('hidden');\n  } else {\n\t\tconnectionStatus.classList.remove('hidden');\n  }\n}\n\nwindow.addEventListener('online', isOnline);\nwindow.addEventListener('offline', isOnline);\nisOnline();\n\nregisterServiceWorker();\n"]}